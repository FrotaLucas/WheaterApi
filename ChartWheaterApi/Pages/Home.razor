@page "/"
@inject ITemperatureService TemperatureService


@* Why there's no browser JavaScript logs for your Console.WriteLine() ?
    In Blazor Server, code runs on the server, not the browser. *@

<PageTitle>Home</PageTitle>


    <h1 class="card-title">Wheater Forecast</h1>

    <div class="card-box">

        <div class="control-box">
            <input @bind="inputCity" class="input-mode" placeholder="enter the city" />
            <button @onclick="FindTemperature" class="btn-primary">Click</button>
        </div>

        <div class="latitude-longitude-lines">
            <div class="geography-lines">
                <label>Latitude</label>
                <div>@TemperatureService.Data.Latitude</div>
            </div>

            <div class="geography-lines">
                <label>Longitude</label>
                <div>@TemperatureService.Data.Longitude</div>
            </div>
        </div>
    </div>




@if (TemperatureService.Data?.TemperatureDate?.Temperature != null && TemperatureService.Data?.TemperatureDate?.Time != null)
    {
        <SfChart Title="@($" {inputCity}, {TemperatureService.Data.TimeZone.Split("/")[0]}")" Width="1200px">



            @*             It lets you hover over points and see the values being plotted.acho q nao precisa!!!
 *@                <ChartTooltipSettings Enable="true" />
            <ChartArea Background="Skyblue"/>

            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Time(h)">
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" Title="Temperature (°C)" Minimum="@($"{minTemp}")" Maximum="50">
            </ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@chartData"
                Fill="orange"
                DashArray="10"
                XName="Time"
                YName="Temps"
                Type="ChartSeriesType.Line"
                Width="2">
                    <ChartMarker Visible="true" Shape="ChartShape.Circle" Width="10" Height="10">
                        <ChartMarkerBorder Width="2" Color="black"></ChartMarkerBorder>
                        <ChartDataLabel Visible="true"></ChartDataLabel>
                    </ChartMarker>

                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

    }

@code {
    string inputCity = "Berlin";
    public List<ChartData> chartData = new();
    double minTemp = 0;

    public class ChartData {
        public string Time { get; set; }
        public double Temps { get; set; }
    }
    //private ResponseWheater response = null;

    // protected async override void OnInitialized()
    // {
    //     await FindTemperature();
    //     //ProductService.ProductsChanged += StateHasChanged;
    //     TemperatureService.TemperatureChanged += StateHasChanged;
    // }

    protected override async Task OnInitializedAsync()
    {
        TemperatureService.TemperatureChanged += StateHasChanged;
        await FindTemperature();
    }


    // public void Dispose()
    // {
    //     //ProductService.ProductsChanged -= StateHasChanged;
    //     TemperatureService.TemperatureChanged -= StateHasChanged;
    // }

    public void Dispose()
    {
        TemperatureService.TemperatureChanged -= StateHasChanged;
    }

    // protected async Task FindTemperature()
    // {

    //     Console.WriteLine("click event");
    //     await TemperatureService.UpdateApi("Berlin");
    //     //response = TemperatureService.Data;
    // }

    private void BuildChart(){
        if (TemperatureService.Data.TemperatureDate.Temperature != null && TemperatureService.Data.TemperatureDate != null)
        {  
            chartData.Clear();
          
            for(int i = 0; i < TemperatureService.Data.TemperatureDate.Temperature.Count(); i++)
            {   
                var data = new ChartData()
                    {
                        Temps = TemperatureService.Data.TemperatureDate.Temperature[i],
                        Time = TemperatureService.Data.TemperatureDate.Time[i].Split("T")[1]
                    };

                if (TemperatureService.Data.TemperatureDate.Temperature[i] < minTemp)
                    minTemp = -20;
                chartData.Add(data);
            }
            

        }
    }

    protected async Task FindTemperature()
    {
        Console.WriteLine("event");
        await TemperatureService.UpdateApi(inputCity);
        BuildChart();
        StateHasChanged(); // força renderização. Talvez nao precise disso

    }


}