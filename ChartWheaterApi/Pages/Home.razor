@page "/"
@inject ITemperatureService TemperatureService


@* Why there's no browser JavaScript logs for your Console.WriteLine() ?
    In Blazor Server, code runs on the server, not the browser. *@

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div>

    <h2>Temperature</h2>

    @* <h3>@response.TimeZone</h3> *@



    <input @bind="inputCity" placeholder="enter the city" />
    <button @onclick="FindTemperature">Click</button>



    <div>
        <label>Latitude</label>
        <div>@TemperatureService.Data.Latitude</div>

        <label>Longitude</label> <!-- Corrigi label duplicado -->
        <div>@TemperatureService.Data.Longitude</div>

        

        @* PESQUISAR aqui
https://www.google.com/search?q=chartjs.blazor+graphic+line&rlz=1C1ISCS_pt-PTBR975BR975&oq=chartjs.blazor+graphic+line&gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIHCAEQIRigATIHCAIQIRigAdIBCTEyNDczajBqOagCALACAQ&sourceid=chrome&ie=UTF-8#fpstate=ive&vld=cid:e4af8501,vid:gGe_oUzwxkg,st:0
 *@
        @* axios y *@
        @if (TemperatureService.Data != null && TemperatureService.Data.TemperatureDate != null &&
        TemperatureService.Data.TemperatureDate.Temperature != null &&
        TemperatureService.Data.TemperatureDate.Temperature.Any())
        {
            @foreach (var item in TemperatureService.Data.TemperatureDate.Temperature)
            {
                <div>@item</div>
            }
        }

        @* axios X *@
        @if (TemperatureService.Data != null && TemperatureService.Data.TemperatureDate != null &&
        TemperatureService.Data.TemperatureDate.Time != null &&
        TemperatureService.Data.TemperatureDate.Time.Any())
        {
            @foreach (var item in TemperatureService.Data.TemperatureDate.Time)
            {
                <div>@item.Split("T")[1]</div>
            }
        }



    </div>



</div>

@* 
<MainComponent/> *@

@code {
    string inputCity = "Berlin";
    public List<ChartData> chartData = new();

    public class ChartData {
        public string Time { get; set; }
        public double Temps { get; set;  }
    }
    //private ResponseWheater response = null;

    // protected async override void OnInitialized()
    // {
    //     await FindTemperature();
    //     //ProductService.ProductsChanged += StateHasChanged;
    //     TemperatureService.TemperatureChanged += StateHasChanged;
    // }

    protected override async Task OnInitializedAsync()
    {
        TemperatureService.TemperatureChanged += StateHasChanged;
        await FindTemperature();
    }


    // public void Dispose()
    // {
    //     //ProductService.ProductsChanged -= StateHasChanged;
    //     TemperatureService.TemperatureChanged -= StateHasChanged;
    // }

    public void Dispose()
    {
        TemperatureService.TemperatureChanged -= StateHasChanged;
    }

    // protected async Task FindTemperature()
    // {

    //     Console.WriteLine("click event");
    //     await TemperatureService.UpdateApi("Berlin");
    //     //response = TemperatureService.Data;
    // }

    private void BuildChart(){
        if (TemperatureService.Data.TemperatureDate.Temperature != null && TemperatureService.Data.TemperatureDate != null)
        {
            chartData.Clear();

            for(int i = 0; i < TemperatureService.Data.TemperatureDate.Temperature.Count(); i++)
            {
                var data = new ChartData()
                    {
                        Temps = TemperatureService.Data.TemperatureDate.Temperature[i],
                        Time = TemperatureService.Data.TemperatureDate.Time[i]
                    };

                chartData.Add(data);
            }

        }
    }

    protected async Task FindTemperature()
    {
        Console.WriteLine("event");
        await TemperatureService.UpdateApi(inputCity);
        BuildChart();
        StateHasChanged(); // força renderização. Talvez nao precise disso

    }


}