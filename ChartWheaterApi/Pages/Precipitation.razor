@page "/precipitation"
@inject IWheaterService WheaterService

<PageTitle>Precipitation</PageTitle>

@if (!isLoading)
{
    <p>Loading ...</p>
}

else
{
    <h1 class="title">See today’s rain forecast for your area ☔ 💦</h1>

    <div class="card-box">

        <div class="control-box">
            <input @bind="inputCity" class="input-mode" placeholder="enter the city" />
            <button @onclick="FindTemperature" class="btn-primary">Click</button>
        </div>

        <div class="latitude-longitude-lines">
            <div class="geography-lines">
                <label>Latitude</label>
                <div>@WheaterService.Data.Latitude</div>
            </div>

            <div class="geography-lines">
                <label>Longitude</label>
                <div>@WheaterService.Data.Longitude</div>
            </div>
        </div>
    </div>
    @* <div>@TemperatureService.chartData[0].Temps</div>*@


    @if (WheaterService.Data?.WheaterData?.Temperatures != null && WheaterService.Data?.WheaterData?.Time != null)
    {
        <SfChart ID="chartGuid" Title="@($" {inputCity}, {WheaterService.Data.TimeZone.Split("/")[0]}")" Width="1200px">



            @*             It lets you hover over points and see the values being plotted.acho q nao precisa!!!
 *@                <ChartTooltipSettings Enable="true" />


            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Time(h)">
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" Title="Probality (%)" Minimum="0" Maximum="100">
            </ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@WheaterService.chartPrecipitationData"
                             XName="Time"
                             YName="Precipitation"
                             Type="ChartSeriesType.Area"
                             Width="2">
                    <ChartMarker Visible="true" Shape="ChartShape.Circle" Width="10" Height="10">
                        <ChartMarkerBorder Width="2" Color="black"></ChartMarkerBorder>
                        <ChartDataLabel Visible="true"></ChartDataLabel>
                    </ChartMarker>

                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

    }


}

@code {
    string inputCity = "Rio de Janeiro";
    bool isLoading = false;
    Guid chartGuid = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        WheaterService.TemperatureChanged += StateHasChanged;
        Console.WriteLine(WheaterService.chartTemperatureData.Count());
        await FindTemperature();
    }

    public void Dispose()
    {
        WheaterService.TemperatureChanged -= StateHasChanged;
    }


    protected async Task FindTemperature()
    {
        isLoading = true;
        Console.WriteLine("event");
        await WheaterService.UpdateApi(inputCity);
        chartGuid = Guid.NewGuid();
        StateHasChanged();

    }


}