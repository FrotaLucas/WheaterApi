@page "/temperature"
@inject IWheaterService WheaterService

<PageTitle>Temperature</PageTitle>

@if (!isLoading)
{
    <p>Loading ...</p>
}

else
{
    <h1 class="title">Check the temperature in your town today 🌡️🧣</h1>

    <div class="card-box">

        <div class="control-box">
            <input @bind="inputCity" class="input-mode" placeholder="enter the city" />
            <button @onclick="FindTemperature" class="btn-primary">Click</button>
        </div>

        <div class="latitude-longitude-lines">
            <div class="geography-lines">
                <label>Latitude</label>
                <div>@WheaterService.Data.Latitude</div>
            </div>

            <div class="geography-lines">
                <label>Longitude</label>
                <div>@WheaterService.Data.Longitude</div>
            </div>
        </div>
    </div>


    @if (WheaterService.Data?.WheaterData?.Temperatures != null && WheaterService.Data?.WheaterData?.Time != null)
    {
        <SfChart Title="@($" {inputCity}, {WheaterService.Data.TimeZone.Split("/")[0]}")" Width="1200px">

            <ChartTooltipSettings Enable="true" />
            <ChartArea Background="AliceBlue" />

            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Time(h)">
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" Title="Temperature (°C)" Minimum="@WheaterService.minTemp" Maximum="50">
            </ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@WheaterService.chartTemperatureData"
                             Fill="orange"
                             DashArray="10"
                             XName="Time"
                             YName="Temps"
                             Type="ChartSeriesType.Line"
                             Width="2">
                    <ChartMarker Visible="true" Shape="ChartShape.Circle" Width="10" Height="10">
                        <ChartMarkerBorder Width="2" Color="black"></ChartMarkerBorder>
                        <ChartDataLabel Visible="true"></ChartDataLabel>
                    </ChartMarker>

                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

    }


}

@code {
    string inputCity = "Berlin";
    bool isLoading = false;
  
    protected override async Task OnInitializedAsync()
    {
        WheaterService.TemperatureChanged += StateHasChanged;
        Console.WriteLine(WheaterService.chartTemperatureData.Count());
        await FindTemperature();
    }

    public void Dispose()
    {
        WheaterService.TemperatureChanged -= StateHasChanged;
    }


    protected async Task FindTemperature()
    {
        isLoading = true;
        Console.WriteLine("event");
        await WheaterService.UpdateApi(inputCity);
        StateHasChanged();

    }


}